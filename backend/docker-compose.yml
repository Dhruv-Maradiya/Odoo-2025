name: odoo_hackthon

services:
  # FastAPI Application
  backend:
    container_name: odoo_hackthon_backend
    build: .
    image: backend
    working_dir: /app
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--reload",
      ]
    environment:
      DEBUG: 1
      PYTHONUNBUFFERED: 1
      FORCE_COLOR: 1
    env_file:
      - .env
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    restart: on-failure
    tty: true
    stdin_open: true
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    networks:
      - odoo_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Service
  redis:
    image: redis:alpine
    container_name: redis
    volumes:
      - redis_data:/data
    restart: on-failure
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - odoo_network

  # MongoDB Service
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: on-failure
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - odoo_network

  # ChromaDB Service
  chromadb:
    image: chromadb/chroma:latest
    container_name: chromadb
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    ports:
      - "8002:8000"
    volumes:
      - chroma_data:/chroma/chroma
    restart: on-failure
    healthcheck:
      test:
        ["CMD", "/bin/bash", "-c", "cat < /dev/null > /dev/tcp/localhost/8000"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - odoo_network

  # Mongo Express Service (optional - for development)
  mongo_express:
    image: mongo-express:latest
    container_name: mongo_express
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password # pragma: allowlist secret
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - odoo_network
    profiles:
      - dev

volumes:
  redis_data:
  mongo_data:
  chroma_data:

networks:
  odoo_network:
    driver: bridge
